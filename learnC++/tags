!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	makefile	/^CC=g++$/;"	m
CFLAGS	makefile	/^CFLAGS=$/;"	m
Move	类中的函数.cpp	/^		void Move(int xset,int yset);$/;"	p	class:Tpoint	file:	access:public	signature:(int xset,int yset)
Move	类中的函数.cpp	/^void Tpoint::Move(int xset,int yset){$/;"	f	class:Tpoint	signature:(int xset,int yset)
P	析构函数.cpp	/^		P(int x,int y){$/;"	f	class:P	access:public	signature:(int x,int y)
P	析构函数.cpp	/^class P{$/;"	c	file:
P	类中读取数值.cpp	/^		P(){$/;"	f	class:P	access:public	signature:()
P	类中读取数值.cpp	/^		P(int a,int b){$/;"	f	class:P	access:public	signature:(int a,int b)
P	类中读取数值.cpp	/^class P{$/;"	c	file:
P::P	析构函数.cpp	/^		P(int x,int y){$/;"	f	class:P	access:public	signature:(int x,int y)
P::P	类中读取数值.cpp	/^		P(){$/;"	f	class:P	access:public	signature:()
P::P	类中读取数值.cpp	/^		P(int a,int b){$/;"	f	class:P	access:public	signature:(int a,int b)
P::X	析构函数.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
P::X	类中读取数值.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
P::Y	析构函数.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
P::Y	类中读取数值.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
P::getX	析构函数.cpp	/^		int getX(){$/;"	f	class:P	access:public	signature:()
P::getX	类中读取数值.cpp	/^		int getX(){$/;"	f	class:P	access:public	signature:()
P::getY	析构函数.cpp	/^		int getY(){$/;"	f	class:P	access:public	signature:()
P::getY	类中读取数值.cpp	/^		int getY(){$/;"	f	class:P	access:public	signature:()
P::~P	析构函数.cpp	/^		~P(){$/;"	f	class:P	access:public	signature:()
Tpoint	类中的函数.cpp	/^class Tpoint{$/;"	c	file:
Tpoint::Move	类中的函数.cpp	/^		void Move(int xset,int yset);$/;"	p	class:Tpoint	file:	access:public	signature:(int xset,int yset)
Tpoint::Move	类中的函数.cpp	/^void Tpoint::Move(int xset,int yset){$/;"	f	class:Tpoint	signature:(int xset,int yset)
Tpoint::X	类中的函数.cpp	/^		int X,Y;$/;"	m	class:Tpoint	file:	access:private
Tpoint::Y	类中的函数.cpp	/^		int X,Y;$/;"	m	class:Tpoint	file:	access:private
Tpoint::getX	类中的函数.cpp	/^		int getX(){$/;"	f	class:Tpoint	access:public	signature:()
Tpoint::getY	类中的函数.cpp	/^		int getY(){$/;"	f	class:Tpoint	access:public	signature:()
Tpoint::point	类中的函数.cpp	/^		void point(int x,int y);$/;"	p	class:Tpoint	file:	access:public	signature:(int x,int y)
Tpoint::point	类中的函数.cpp	/^void Tpoint::point(int x,int y){$/;"	f	class:Tpoint	signature:(int x,int y)
X	析构函数.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
X	类中的函数.cpp	/^		int X,Y;$/;"	m	class:Tpoint	file:	access:private
X	类中读取数值.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
Y	析构函数.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
Y	类中的函数.cpp	/^		int X,Y;$/;"	m	class:Tpoint	file:	access:private
Y	类中读取数值.cpp	/^		int X,Y;$/;"	m	class:P	file:	access:private
_base_h_	basedef.h	10;"	d
base	basedef.h	/^		base(){$/;"	f	class:base	access:public	signature:()
base	basedef.h	/^class base{$/;"	c
base	静态成员+继承.cpp	/^class base{$/;"	c	file:
base::base	basedef.h	/^		base(){$/;"	f	class:base	access:public	signature:()
base::geti	basedef.h	/^		int geti(){$/;"	f	class:base	access:public	signature:()
base::getj	basedef.h	/^		int getj(){$/;"	f	class:base	access:public	signature:()
base::getk	basedef.h	/^		int getk(){$/;"	f	class:base	access:protected	signature:()
base::i	basedef.h	/^		int i;$/;"	m	class:base	access:private
base::j	basedef.h	/^		int j;$/;"	m	class:base	access:public
base::k	basedef.h	/^		int k;$/;"	m	class:base	access:protected
base::num	静态成员+继承.cpp	/^		static int num;$/;"	m	class:base	file:	access:public
base::num	静态成员+继承.cpp	/^int base::num=0;$/;"	m	class:base	file:
create	quick.h	/^int create(int a[],int n){$/;"	f	signature:(int a[],int n)
create	quick.h	/^int create(int m){$/;"	f	signature:(int m)
derived	继承函数.cpp	/^class derived:public p{$/;"	c	file:	inherits:p
derived	静态成员+继承.cpp	/^class derived:public base{$/;"	c	file:	inherits:base
derived1	继承和头文件.cpp	/^class derived1:public base{$/;"	c	file:	inherits:base
derived1::printi	继承和头文件.cpp	/^		void printi(){$/;"	f	class:derived1	access:public	signature:()
derived1::printj	继承和头文件.cpp	/^		void printj(){$/;"	f	class:derived1	access:public	signature:()
derived1::printk	继承和头文件.cpp	/^		void printk(){$/;"	f	class:derived1	access:public	signature:()
derived::printj	继承函数.cpp	/^		void printj(){$/;"	f	class:derived	access:public	signature:()
division	quick.h	/^int division(int a[],int m,int n){$/;"	f	signature:(int a[],int m,int n)
fun	diedai.cpp	/^int fun(int m){$/;"	f	signature:(int m)
fun	quick.h	/^int fun(int a[],int m,int n){$/;"	f	signature:(int a[],int m,int n)
fun	random.h	/^int fun(){$/;"	f	signature:()
fun	二维数组用作头文件.cpp	/^int fun(int a[][2],int m,int n){$/;"	f	signature:(int a[][2],int m,int n)
fun	多个返回值.cpp	/^int fun(int a,int b){$/;"	f	signature:(int a,int b)
fun	快速排序.cpp	/^int fun(int a[],int n){$/;"	f	signature:(int a[],int n)
fun	试探法生成彩票组合.cpp	/^int fun(int n,int m){$/;"	f	signature:(int n,int m)
fun	返回数组.cpp	/^int fun(int a[],int m){$/;"	f	signature:(int a[],int m)
fun	递归算法解决进制转换.cpp	/^int fun(char *s,int n,int b){$/;"	f	signature:(char *s,int n,int b)
fun2	二维数组用作头文件.cpp	/^int fun2(int a[][2],int m,int n){$/;"	f	signature:(int a[][2],int m,int n)
getX	析构函数.cpp	/^		int getX(){$/;"	f	class:P	access:public	signature:()
getX	类中的函数.cpp	/^		int getX(){$/;"	f	class:Tpoint	access:public	signature:()
getX	类中读取数值.cpp	/^		int getX(){$/;"	f	class:P	access:public	signature:()
getY	析构函数.cpp	/^		int getY(){$/;"	f	class:P	access:public	signature:()
getY	类中的函数.cpp	/^		int getY(){$/;"	f	class:Tpoint	access:public	signature:()
getY	类中读取数值.cpp	/^		int getY(){$/;"	f	class:P	access:public	signature:()
geti	basedef.h	/^		int geti(){$/;"	f	class:base	access:public	signature:()
geti	继承函数.cpp	/^		int geti(){$/;"	f	class:p	access:public	signature:()
getj	basedef.h	/^		int getj(){$/;"	f	class:base	access:public	signature:()
getk	basedef.h	/^		int getk(){$/;"	f	class:base	access:protected	signature:()
getx	lei.cpp	/^		int getx(){$/;"	f	class:point	access:public	signature:()
getx	拷贝构造函数.cpp	/^		int getx(){$/;"	f	class:point	access:public	signature:()
gety	lei.cpp	/^		int gety(){$/;"	f	class:point	access:public	signature:()
gety	拷贝构造函数.cpp	/^		int gety(){$/;"	f	class:point	access:public	signature:()
i	basedef.h	/^		int i;$/;"	m	class:base	access:private
i	继承函数.cpp	/^		int i;$/;"	m	class:p	file:	access:private
init	lei.cpp	/^		int init(int i,int j){$/;"	f	class:point	access:public	signature:(int i,int j)
input	quick.h	/^int input(int a[],int m){$/;"	f	signature:(int a[],int m)
j	basedef.h	/^		int j;$/;"	m	class:base	access:public
k	basedef.h	/^		int k;$/;"	m	class:base	access:protected
lottery	试探法生成彩票组合.cpp	/^int lottery[max];$/;"	v
main	diedai.cpp	/^int main(){$/;"	f	signature:()
main	heloo.c	/^int main(){$/;"	f
main	lei.cpp	/^int main(){$/;"	f	signature:()
main	str.cpp	/^int main(){$/;"	f	signature:()
main	while输入.cpp	/^int main(){$/;"	f	signature:()
main	二维数组用作头文件.cpp	/^int main(){$/;"	f	signature:()
main	多个返回值.cpp	/^int  main(){$/;"	f	signature:()
main	快速排序.cpp	/^int main(){$/;"	f	signature:()
main	怎么合并case.cpp	/^int main(){$/;"	f	signature:()
main	战斗力.cpp	/^int main(){$/;"	f	signature:()
main	拷贝构造函数.cpp	/^int main(){$/;"	f	signature:()
main	数字统计.cpp	/^int main(){$/;"	f	signature:()
main	方框内引用变量.cpp	/^int main(){$/;"	f	signature:()
main	析构函数.cpp	/^int main(){$/;"	f	signature:()
main	碱基对.cpp	/^int main(){$/;"	f	signature:()
main	类中的函数.cpp	/^int main(){$/;"	f	signature:()
main	类中读取数值.cpp	/^int main(){$/;"	f	signature:()
main	继承函数.cpp	/^int main(){$/;"	f	signature:()
main	继承和头文件.cpp	/^int main(){$/;"	f	signature:()
main	试探法生成彩票组合.cpp	/^int main(){$/;"	f	signature:()
main	返回数组.cpp	/^int main(){$/;"	f	signature:()
main	递归算法解决进制转换.cpp	/^int main(){$/;"	f	signature:()
main	静态成员+继承.cpp	/^int main(){$/;"	f	signature:()
max	试探法生成彩票组合.cpp	12;"	d	file:
move	lei.cpp	/^		int move(int mx,int my){$/;"	f	class:point	access:public	signature:(int mx,int my)
num	试探法生成彩票组合.cpp	/^int num[num];$/;"	v
num	试探法生成彩票组合.cpp	11;"	d	file:
num	静态成员+继承.cpp	/^		static int num;$/;"	m	class:base	file:	access:public
num	静态成员+继承.cpp	/^int base::num=0;$/;"	m	class:base	file:
objects	makefile	/^objects= 拷贝构造函数 类中读取数值 类中的函数 析构函数 继承和头文件 多个返回值$/;"	m
out	quick.h	/^int out(int a[],int m){$/;"	f	signature:(int a[],int m)
p	数字统计.cpp	/^struct p{$/;"	s	file:
p	继承函数.cpp	/^		p(int j=0){$/;"	f	class:p	access:public	signature:(int j=0)
p	继承函数.cpp	/^class p{$/;"	c	file:
p::geti	继承函数.cpp	/^		int geti(){$/;"	f	class:p	access:public	signature:()
p::i	继承函数.cpp	/^		int i;$/;"	m	class:p	file:	access:private
p::p	继承函数.cpp	/^		p(int j=0){$/;"	f	class:p	access:public	signature:(int j=0)
p::printi	继承函数.cpp	/^		void printi(){$/;"	f	class:p	access:public	signature:()
p::x	数字统计.cpp	/^	int x;$/;"	m	struct:p	file:	access:public
p::y	数字统计.cpp	/^	int y;$/;"	m	struct:p	file:	access:public
point	lei.cpp	/^class point{$/;"	c	file:
point	拷贝构造函数.cpp	/^		point(int xx=0,int yy=0){$/;"	f	class:point	access:public	signature:(int xx=0,int yy=0)
point	拷贝构造函数.cpp	/^		point(point &p);$/;"	p	class:point	file:	access:public	signature:(point &p)
point	拷贝构造函数.cpp	/^class point{$/;"	c	file:
point	拷贝构造函数.cpp	/^point::point(point &p){$/;"	f	class:point	signature:(point &p)
point	类中的函数.cpp	/^		void point(int x,int y);$/;"	p	class:Tpoint	file:	access:public	signature:(int x,int y)
point	类中的函数.cpp	/^void Tpoint::point(int x,int y){$/;"	f	class:Tpoint	signature:(int x,int y)
point::getx	lei.cpp	/^		int getx(){$/;"	f	class:point	access:public	signature:()
point::getx	拷贝构造函数.cpp	/^		int getx(){$/;"	f	class:point	access:public	signature:()
point::gety	lei.cpp	/^		int gety(){$/;"	f	class:point	access:public	signature:()
point::gety	拷贝构造函数.cpp	/^		int gety(){$/;"	f	class:point	access:public	signature:()
point::init	lei.cpp	/^		int init(int i,int j){$/;"	f	class:point	access:public	signature:(int i,int j)
point::move	lei.cpp	/^		int move(int mx,int my){$/;"	f	class:point	access:public	signature:(int mx,int my)
point::point	拷贝构造函数.cpp	/^		point(int xx=0,int yy=0){$/;"	f	class:point	access:public	signature:(int xx=0,int yy=0)
point::point	拷贝构造函数.cpp	/^		point(point &p);$/;"	p	class:point	file:	access:public	signature:(point &p)
point::point	拷贝构造函数.cpp	/^point::point(point &p){$/;"	f	class:point	signature:(point &p)
point::setxy	lei.cpp	/^		int setxy(int m,int n){$/;"	f	class:point	access:public	signature:(int m,int n)
point::x	lei.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
point::x	拷贝构造函数.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
point::y	lei.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
point::y	拷贝构造函数.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
printi	继承函数.cpp	/^		void printi(){$/;"	f	class:p	access:public	signature:()
printi	继承和头文件.cpp	/^		void printi(){$/;"	f	class:derived1	access:public	signature:()
printj	继承函数.cpp	/^		void printj(){$/;"	f	class:derived	access:public	signature:()
printj	继承和头文件.cpp	/^		void printj(){$/;"	f	class:derived1	access:public	signature:()
printk	继承和头文件.cpp	/^		void printk(){$/;"	f	class:derived1	access:public	signature:()
random	random.h	10;"	d
setxy	lei.cpp	/^		int setxy(int m,int n){$/;"	f	class:point	access:public	signature:(int m,int n)
x	lei.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
x	拷贝构造函数.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
x	数字统计.cpp	/^	int x;$/;"	m	struct:p	file:	access:public
y	lei.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
y	拷贝构造函数.cpp	/^		int x,y;$/;"	m	class:point	file:	access:private
y	数字统计.cpp	/^	int y;$/;"	m	struct:p	file:	access:public
~P	析构函数.cpp	/^		~P(){$/;"	f	class:P	access:public	signature:()
